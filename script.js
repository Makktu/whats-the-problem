document.addEventListener('DOMContentLoaded', () => {
    // Main application options
    const options = document.querySelectorAll('.option');
    
    options.forEach(option => {
        option.addEventListener('click', () => {
            const optionNumber = option.getAttribute('data-option');
            const optionText = option.querySelector('.option-text').textContent;
            
            // For now, just log the selection - this will be replaced with API calls to the LLM later
            console.log(`Selected option ${optionNumber}: ${optionText}`);
            
            // Visual feedback on selection
            highlightSelection(option);
            
            // In the future, this would trigger the next set of questions from the LLM
            // For now, show a placeholder message
            showPlaceholderResponse(optionNumber, optionText);
        });
    });
    
    function highlightSelection(selectedOption) {
        // Remove any existing 'selected' class
        options.forEach(opt => opt.classList.remove('selected'));
        
        // Add 'selected' class to the clicked option
        selectedOption.classList.add('selected');
    }
    
    function showPlaceholderResponse(optionNumber, optionText) {
        // Create a response element if it doesn't exist
        let responseElement = document.querySelector('.response');
        
        if (!responseElement) {
            responseElement = document.createElement('div');
            responseElement.className = 'response';
            document.querySelector('main').appendChild(responseElement);
        }
        
        // Show a placeholder message
        responseElement.innerHTML = `
            <div class="response-content">
                <h2>You selected: ${optionText}</h2>
                <p>This is a placeholder for the next set of questions that would be generated by the LLM.</p>
                <p>In the full implementation, the system would now present you with more specific questions related to your ${optionText.toLowerCase()} issue.</p>
                <button class="back-button">Back to Categories</button>
            </div>
        `;
        
        // Add event listener to the back button
        const backButton = responseElement.querySelector('.back-button');
        backButton.addEventListener('click', () => {
            responseElement.remove();
            options.forEach(opt => opt.classList.remove('selected'));
        });
    }

    // Developer Menu Functionality
    const devMenuToggle = document.getElementById('dev-menu-toggle');
    const devMenu = document.getElementById('dev-menu');
    const devMenuClose = document.getElementById('dev-menu-close');
    const chatInput = document.getElementById('chat-input');
    const chatSend = document.getElementById('chat-send');
    const chatMessages = document.getElementById('chat-messages');
    const testConnection = document.getElementById('test-connection');
    const connectionStatus = document.getElementById('connection-status');
    const temperatureSlider = document.getElementById('llm-temperature');
    const temperatureValue = document.getElementById('temperature-value');

    // Toggle developer menu
    devMenuToggle.addEventListener('click', () => {
        devMenu.classList.toggle('open');
    });

    // Close developer menu
    devMenuClose.addEventListener('click', () => {
        devMenu.classList.remove('open');
    });

    // Update temperature display
    temperatureSlider.addEventListener('input', () => {
        temperatureValue.textContent = temperatureSlider.value;
    });

    // Test connection to LLM
    testConnection.addEventListener('click', async () => {
        const endpoint = document.getElementById('llm-endpoint').value;
        connectionStatus.textContent = 'Testing connection...';
        
        try {
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    model: document.getElementById('llm-model').value,
                    messages: [{ role: 'user', content: 'Hello' }],
                    temperature: parseFloat(temperatureSlider.value)
                })
            });
            
            if (response.ok) {
                connectionStatus.textContent = 'Connected successfully!';
                connectionStatus.style.color = '#4caf50';
            } else {
                const errorData = await response.json().catch(() => ({}));
                const errorMessage = errorData.error?.message || `${response.status} ${response.statusText}`;
                connectionStatus.textContent = `Error: ${errorMessage}`;
                connectionStatus.style.color = '#f44336';
                console.error('Connection error:', errorData);
            }
        } catch (err) {
            connectionStatus.textContent = `Error: ${err.message}`;
            connectionStatus.style.color = '#f44336';
            console.error('Connection error:', err);
        }
    });

    // Send message to LLM
    async function sendMessage() {
        const userInput = chatInput.value.trim();
        if (!userInput) return;
        
        // Add user message to chat
        addMessageToChat('user', userInput);
        chatInput.value = '';
        
        // Get LLM settings
        const endpoint = document.getElementById('llm-endpoint').value;
        const model = document.getElementById('llm-model').value;
        const temperature = parseFloat(temperatureSlider.value);
        
        // Create placeholder for LLM response
        const placeholderId = 'response-' + Date.now();
        addMessageToChat('llm', 'Thinking...', placeholderId);
        
        // Send request to LLM
        try {
            // Create a proper chat history array
            const payload = {
                model: model,
                messages: [
                    { role: 'system', content: 'You are a helpful assistant.' },
                    { role: 'user', content: userInput }
                ],
                temperature: temperature
            };
            
            console.log('Sending payload:', JSON.stringify(payload, null, 2));
            
            const res = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            
            if (!res.ok) {
                const errorData = await res.json().catch(() => ({}));
                throw new Error(errorData.error?.message || `HTTP error: ${res.status}`);
            }
            
            const data = await res.json();
            console.log('Received response:', data);
            
            if (data.choices && data.choices.length > 0 && data.choices[0].message) {
                const reply = data.choices[0].message.content;
                updateMessage(placeholderId, reply);
            } else {
                throw new Error('Invalid response format from LLM');
            }
        } catch (err) {
            console.error('LLM error:', err);
            updateMessage(placeholderId, `Error: ${err.message}`);
        }
    }
    
    // Add message to chat
    function addMessageToChat(role, content, id = null) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${role}-message`;
        if (id) messageDiv.id = id;
        messageDiv.textContent = content;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // Update message in chat
    function updateMessage(id, content) {
        const messageDiv = document.getElementById(id);
        if (messageDiv) {
            messageDiv.textContent = content;
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }
    
    // Send message on button click
    chatSend.addEventListener('click', sendMessage);
    
    // Send message on Enter key
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
});
